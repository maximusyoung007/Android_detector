package com.example.android_malware_detection.activity;

import android.annotation.SuppressLint;
import android.app.DownloadManager;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.support.v4.provider.FontsContractCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.String;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import com.example.android_malware_detection.R;
import com.example.android_malware_detection.util.StreamUtil;
import com.example.android_malware_detection.util.ToastUtil;

import org.json.JSONException;
import org.json.JSONObject;

public class SplashActivity extends AppCompatActivity {
    private TextView tv_version_name;
    private int mLocalVersionCode;
    private String mVersionDes;
    private String mDownloadUrl;
    private RelativeLayout rl_root;
    protected static final int UPDATE_VERSION = 100;
    protected static final int ENTER_HOME = 101;
    protected static final int URL_ERROR = 102;
    protected static final int IO_ERROR = 103;
    protected static final int JSON_ERROR = 104;
    private Handler mHandler = new Handler(){
        public void handleMessage(android.os.Message msg){
            switch(msg.what){
                case UPDATE_VERSION:
                    showUpdateDialog();
                    break;
                case ENTER_HOME:
                    enterHome();
                    break;
                case URL_ERROR:
                    ToastUtil.show(SplashActivity.this,"url异常");
                    enterHome();
                    break;
                case IO_ERROR:
                    ToastUtil.show(getApplicationContext(),"读取异常");
                    enterHome();
                    break;
                case JSON_ERROR:
                    ToastUtil.show(getApplicationContext(),"json解析异常");
                    enterHome();
                    break;
            }
        };
    };
    private void initDB(){
        initAddressDB("antivirus.db");
    }
    private void initAddressDB(String dbName){
        File files = getFilesDir();
        File file = new File(files,dbName);
        if(file.exists()){
            return;
        }
        InputStream stream = null;
        FileOutputStream fos = null;
        try{
            stream = getAssets().open(dbName);
            fos = new FileOutputStream(file);
            byte[] bs = new byte[1024];
            int temp = -1;
            while((temp = stream.read(bs)) != -1){
                fos.write(bs,0,temp);
            }
        }catch(Exception e){
            e.printStackTrace();
        }finally {
            if(stream != null && fos != null){
                try{
                    stream.close();
                    fos.close();
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //requestWindowFeature(FEATURE_NO_TITLE);
        setContentView(R.layout.activity_splash);
        initUI();
        initData();
        initAnimation();
        initDB();
    }
    protected void initAnimation(){
        AlphaAnimation alphaAnimation = new AlphaAnimation(0,1);
        alphaAnimation.setDuration(2000);
        rl_root.startAnimation(alphaAnimation);
    }
    protected  void showUpdateDialog(){
        //对话框是依赖于activity存在的
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        //builder.setIcon(R.drawable.ic_launcher);
        builder.setTitle("版本更新");
        builder.setMessage(mVersionDes);
        builder.setPositiveButton("立即更新", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                //下载apk，downloadURL
                //downloadApk();
            }
        });
        builder.setNegativeButton("稍后再说", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                //取消对话框，进去主界面
                enterHome();
            }
        });
        builder.setOnCancelListener(new DialogInterface.OnCancelListener() {
            @Override
            public void onCancel(DialogInterface dialog) {
                enterHome();
                dialog.dismiss();
            }
        });
        builder.show();
        //new AlertDialog.Builder(this);
    }
    /**
     * 初始化UI方法
     */
    private void initUI() {
        tv_version_name = (TextView) findViewById(R.id.tv_version_name);
        rl_root = (RelativeLayout) findViewById(R.id.rl_root);
    }
    protected void enterHome(){
        Intent intent = new Intent(this,HomeActivity.class);
        startActivity(intent);
        //关闭导航界面
        finish();
    }
    private void initData(){
        tv_version_name.setText("版本名称：" + getVersionName());
   //检测是否有更新
        mLocalVersionCode = getVersionCode();
        checkVersion();
    }
   /* protected void downloadApk(){
        if(Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED));
        String path = Environment.getExternalStorageDirectory().getAbsolutePath()+
                File.separator + "malware detector";
        HttpUtils httpUtils = new HttpUtils();
        httputils.download(mDownloadUrl,path,new RequestCallBack<file>())
    }*/
    private void checkVersion() {
        new Thread(){
            public void run(){
                Message msg = Message.obtain();
                long startTime = System.currentTimeMillis();
                try{
                    URL url = new URL("http://10.0.2.2/update.json");
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setConnectTimeout(2000);
                    connection.setReadTimeout(2000);
                    //connection.setRequestMethod("POST");
                    if(connection.getResponseCode() == 200){
                        InputStream is = connection.getInputStream();
                        String json = StreamUtil.stream2String(is);
                        Log.i("SplashActivity",json);
                        JSONObject jsonObject = new JSONObject(json);
                        String versionName = jsonObject.getString("versionName");
                        //jsonObject .getString("versionName");
                        mVersionDes = jsonObject .getString("versionDes");
                        String versionCode = jsonObject .getString("versionCode");
                        mDownloadUrl = jsonObject .getString("downloadUrl");
                        Log.i("SplashActivity",versionName);
                        Log.i("SplashActivity",mVersionDes);
                        Log.i("SplashActivity",versionCode);
                        Log.i("SplashActivity",mDownloadUrl);

                        //比对版本号
                        if(mLocalVersionCode < Integer.parseInt(versionCode)){
                            //消息机制
                            msg.what = UPDATE_VERSION;
                        }else{
                            msg.what = ENTER_HOME;
                        }
                    }
                }catch (MalformedURLException e){
                    e.printStackTrace();
                    msg.what = URL_ERROR;
                }catch(IOException e){
                    e.printStackTrace();
                    msg.what = IO_ERROR;
                }catch(JSONException e){
                    e.printStackTrace();
                    msg.what = JSON_ERROR;
                }finally {
                    //指定睡眠时间，请求网络时间超过4秒就不处理，小于4秒就强制睡眠4秒
                    long endTime = System.currentTimeMillis();
                    if(endTime - startTime < 40000){
                        try{
                            Thread.sleep(4000 - (endTime - startTime));
                        }catch(Exception e){
                            e.printStackTrace();
                        }
                    }
                    mHandler.sendMessage(msg);
                }

            };
        }.start();
    }

    private int getVersionCode() {
        PackageManager pm = getPackageManager();
        try{
            PackageInfo packageInfo = pm.getPackageInfo(getPackageName(),0);
            return packageInfo.versionCode;
        }catch(Exception e){
            e.printStackTrace();
        }
        return 0;
    }

    /**
     * @return 应用版本名称 返回null代表有异常
     */
    @Nullable
    private String getVersionName() {
        //packagemanager
        PackageManager pm = getPackageManager();
        try{
            PackageInfo packageInfo = pm.getPackageInfo(getPackageName(),0);
            return packageInfo.versionName;
        }catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }

    
}
